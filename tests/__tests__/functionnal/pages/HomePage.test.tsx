import React from 'react';
import { screen, render } from '@testing-library/react';
import '@testing-library/jest-dom'; // âœ… Import des matchers Jest (ex: .toBeInTheDocument())
import userEvent from '@testing-library/user-event';
import HomePage from '../../../../app/page';

describe('<HomePage />', async () => {
  beforeEach(() => {
    // ðŸŽ¯ ARRANGE: Rendu du composant
    render(<HomePage />);
  });

  test('âœ… Affiche le titre principal', () => {
    // ðŸŽ¯ ASSERT: VÃ©rifier si le titre principal est affichÃ©
    expect(screen.getByText(/Bienvenue sur l'outil de Questionnaires/i)).toBeInTheDocument();
  });

  test('âœ… Affiche la description', () => {
    // ðŸŽ¯ ASSERT: VÃ©rifier si la description est bien prÃ©sente
    expect(screen.getByText(/CrÃ©ez des questionnaires interactifs, collectez des rÃ©ponses/i)).toBeInTheDocument();
  });

  test('âœ… VÃ©rifie la prÃ©sence de tous les boutons', () => {
    // ðŸŽ¯ ASSERT: VÃ©rifier si chaque bouton est bien rendu
    expect(screen.getByRole('button', { name: /CrÃ©er un questionnaire/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /PrÃ©visualiser le questionnaire/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Voir les rÃ©sultats/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Tous les questionnaires/i })).toBeInTheDocument();
  });

  test('âœ… VÃ©rifie que les boutons sont cliquables', async () => {
    // ðŸŽ¯ ARRANGE: RÃ©cupÃ©ration du bouton
    const user = userEvent.setup();
    const createBtn = screen.getByRole('button', { name: /CrÃ©er un questionnaire/i });

    // ðŸŽ¯ ACT: L'utilisateur clique sur le bouton
    await user.click(createBtn);

    // ðŸŽ¯ ASSERT: VÃ©rifier que le bouton est bien interactif
    expect(createBtn).toBeEnabled();
  });

  test('âœ… VÃ©rifie que les liens redirigent correctement', () => {
    // ðŸŽ¯ ASSERT: VÃ©rifier les URLs des liens
    expect(screen.getByRole('link', { name: /CrÃ©er un questionnaire/i })).toHaveAttribute('href', '/questionnaire/create');
    expect(screen.getByRole('link', { name: /PrÃ©visualiser le questionnaire/i })).toHaveAttribute('href', '/questionnaire/preview');
    expect(screen.getByRole('link', { name: /Voir les rÃ©sultats/i })).toHaveAttribute('href', '/results');
    expect(screen.getByRole('link', { name: /Tous les questionnaires/i })).toHaveAttribute('href', '/questionnaire/all');
  });

  test('âœ… VÃ©rifie que le composant `Wrapper` est bien utilisÃ©', () => {
    // ðŸŽ¯ ASSERT: VÃ©rifier que `Wrapper` est bien affichÃ© via son testID
    expect(screen.getByTestId('wrapper')).toBeInTheDocument();
  });

  test('âœ… VÃ©rifie lâ€™application des styles Tailwind', () => {
    // ðŸŽ¯ ARRANGE: SÃ©lection de l'Ã©lÃ©ment <main>
    const mainElement = screen.getByRole('main');

    // ðŸŽ¯ ASSERT: VÃ©rifier si les classes Tailwind sont bien appliquÃ©es
    expect(mainElement).toHaveClass('container mx-auto p-6');
  });
});
